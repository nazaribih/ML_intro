# -*- coding: utf-8 -*-
"""ppproject.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1R_lDsvhEOucZ86MwnYRu-t5tnfJ3shSd
"""

import csv
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import plotly.express as px

#df = pd.read_csv("/content/diabetes_012_health_indicators_BRFSS2015.csv")

df_50_50 = pd.read_csv("/content/diabetes_binary_5050split_health_indicators_BRFSS2015.csv")

"""Pytanka:

1) co mamy zrobić z 3 ramkami danych? złączyć, wybrać, porównać ...?

2) Redundacja? Czy korelacja 0.3 wystarczy aby odrzucić jakąś kolumnę? czy wgl ich trzeba odrzucać czy może połączyć?

3) skąd wiedzieć czy to stroke jest przyczyną cukrzycy czy na odwrót ?\

4) czemu mamy dane tylko dla dzieci? trzeba więcej!!!

##Data Understanding

**Main info**

Data from:  [Data frames with columns explanations](https://www.kaggle.com/datasets/alexteboul/diabetes-health-indicators-dataset/data?select=diabetes_012_health_indicators_BRFSS2015.csv)


**Where is the data from?**

Data frame includes data collected in 2015 from The Behavioral Risk Factor Surveillance System (BRFSS) which is a health-related telephone survey that is collected annually by the CDC.


**Main goal : predict the risk of diabetes**



Data frames included on Kaggle:

  1) **diabetes _ 012 _ health _ indicators _ BRFSS2015.csv** is a clean dataset of 253,680 survey responses to the CDC's BRFSS2015. The target variable Diabetes_012 has 3 classes. 0 is for no diabetes or only during pregnancy, 1 is for prediabetes, and 2 is for diabetes. There is class imbalance in this dataset. This dataset has 21 feature variables.

  2)**diabetes _ binary _ 5050split _ health _ indicators _ BRFSS2015.csv** is a clean dataset of 70,692 survey responses to the CDC's BRFSS2015. It has an equal 50-50 split of respondents with no diabetes and with either prediabetes or diabetes. The target variable Diabetes_binary has 2 classes. 0 is for no diabetes, and 1 is for prediabetes or diabetes. This dataset has 21 feature variables and is balanced.

  3)**diabetes _ binary _ health _ indicators _ BRFSS2015.csv** is a clean dataset of 253,680 survey responses to the CDC's BRFSS2015. The target variable Diabetes_binary has 2 classes. 0 is for no diabetes, and 1 is for prediabetes or diabetes. This dataset has 21 feature variables and is not balanced.

**Business Aim** (to choose):

1) **Predicting diabetes for insurance companies (people with insurance)**

*(Kaggle: [...]"Diabetes also places a massive burden on the economy, with diagnosed diabetes costs of roughly 327 billion dollars and total costs with undiagnosed diabetes and prediabetes approaching $400 billion dollars annually.")*

2) **creating an app thn can help you predict wether you will have diabetes**

*(Kaggle : [...]"Furthermore, the CDC estimates that 1 in 5 diabetics, and roughly 8 in 10 prediabetics are unaware of their risk.")*

## Introductory analysis of the dataset
"""

df_50_50.head()

df_50_50.info() # we don't have missing data, all columns are floats

# plot the correlation matrix
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(12, 10))
sns.heatmap(df_50_50.corr(), annot=True, cmap='coolwarm', fmt=".2f")
plt.title("Correlation Matrix for df variables")
plt.show()

"""The biggest correlations are of Diabetes_binary are with HighBP, HighChol, BMI, HeartDiseaseorAttack, GenHlth, PhysHlth, DiffWalk, and Age"""

df_50_50.nunique() # although columns are floats we can see there are a lot of categorical (0-1) data

#lets add some new columns to change the data that is really categorical from float to "Yes" and "No" for easier plotting
df_50_50['Diabetes_cat']= np.where(df_50_50['Diabetes_binary']==0, 'No','Yes')
df_50_50['HightBP_cat']= np.where(df_50_50['HighBP']==0, 'No','Yes')
df_50_50['HighChol_cat']= np.where(df_50_50['HighChol']==0, 'No','Yes')
df_50_50['CholCheck_cat']= np.where(df_50_50['CholCheck']==0, 'No','Yes')
df_50_50['Smoker_cat']= np.where(df_50_50['Smoker']==0, 'No','Yes')
df_50_50['Stroke_cat']= np.where(df_50_50['Stroke']==0, 'No','Yes')
df_50_50['HeartAttack_cat']= np.where(df_50_50['HeartDiseaseorAttack']==0, 'No','Yes')
df_50_50['PhysAct_cat']= np.where(df_50_50['PhysActivity']==0, 'No','Yes')
df_50_50['Fruits_cat']= np.where(df_50_50['Fruits']==0, 'No','Yes')
df_50_50['Veggies_cat']= np.where(df_50_50['Veggies']==0, 'No','Yes')
df_50_50['Alcohol_cat']= np.where(df_50_50['HvyAlcoholConsump']==0, 'No','Yes')

numerical_cols = df_50_50.select_dtypes(include='number').columns.tolist()
numerical_cols

"""## BMI distribution vs diabetes"""

fig = px.histogram(df_50_50,
                   x='BMI',
                   marginal='box',
                   nbins=47,
                   color='Diabetes_cat',
                   color_discrete_sequence=['grey','green'],
                   title="BMI distribution vs diabetes"
                   )
fig.update_layout(bargap=0.1)
fig.show()
print("Correlation between BMI and diabetes:", df_50_50.Diabetes_binary.corr(df_50_50.BMI))

"""Observations:
* There are many outliers - people with high BMI
* There are more outliers with high BMi than low BMI
* the median of BMi is lower for people without diabetes and higher for ill people
* As the BMI increases the proportion of people with diabetes to the people without also increases
* This factor might be relevant for predictions

## Blood Pressure distribution vs diabetes
"""

fig = px.histogram(df_50_50,
                   x='HightBP_cat',
                   nbins=47,
                   color='Diabetes_cat',
                   color_discrete_sequence=['grey','green'],
                   title="Blood Pressure distribution vs diabetes"
                   )
fig.update_layout(bargap=0.1)
fig.show()
print("Correlation between BP and diabetes:", df_50_50.Diabetes_binary.corr(df_50_50.HighBP))

"""Observations:
* The amount of people with diabetes is higher among people with high blood pressure - more than a half of people with high blood pressure has diabetes
* circa 1/3 of people with normal BP has diabetes
* the correlation is 0.38 so this factor might be relevant to predictions

## Cholesterol distribution vs diabetes
"""

fig = px.histogram(df_50_50,
                   x='HighChol_cat',
                   nbins=47,
                   color='Diabetes_cat',
                   color_discrete_sequence=['grey','green'],
                   title="Cholesterol distribution vs diabetes"
                   )
fig.update_layout(bargap=0.1)
fig.show()
print("Correlation between Cholesterol and diabetes:", df_50_50.Diabetes_binary.corr(df_50_50.HighChol))

"""Observation:
* relationship is very similar to the Blood pressure
* the correlation is circa 0.29 so this factor also might be relevant

## Is Blood Pressure highly dependend on Cholesterol ?
"""

df_50_50.HighBP.corr(df_50_50.HighChol)

"""Yes. Maybe we will use only one of those factors to escape redundancy (?)

## Smoking vs diabetes
"""

fig = px.histogram(df_50_50,
                   x='Smoker_cat',
                   nbins=47,
                   color='Diabetes_cat',
                   color_discrete_sequence=['grey','green'],
                   title="Smoking vs diabetes"
                   )
fig.update_layout(bargap=0.1)
fig.show()
print("Correlation between Smoking and diabetes:", df_50_50.Diabetes_binary.corr(df_50_50.Smoker))

"""Observations:
* there are slightly more ill people among smokers but the difference is not drastic
* the correlation is low
* the percent of people with diabetes in each category are pretty much the same (circa 50/50)
* maybe this feature isn't relevant to the predictions? But the articles online suggest otherwise
* maybe there is correlation between smoking and other relevant factors? (Check later on the heatmap)

## Stroke vs diabetes
"""

fig = px.histogram(df_50_50,
                   x='Stroke_cat',
                   nbins=47,
                   color='Diabetes_cat',
                   color_discrete_sequence=['grey','green'],
                   title="Stroke vs diabetes"
                   )
fig.update_layout(bargap=0.1)
fig.show()
print("Correlation between Stroke and diabetes:", df_50_50.Diabetes_binary.corr(df_50_50.Stroke))

"""Observations:
* class imbalance - way more data from people withou strokes
* The proportion is much higher for people who had a stroke
* Correlation is pretty high but do we know wether Stroke caused diabetes or maybe diabetes caused stroke?
* We need to check if this feature is appropriate for our predictions

## Number of People by GenHlth (their health estimation) with and without Diabetes
"""

# To analyze GenHlth, PhysHlth, DiffWalk, and Age vs. Diabetes_binary

# GenHlth: 1 - 5:
# 1 - excelent, 5 - poor

count_df = df_50_50.groupby(['GenHlth', 'Diabetes_binary']).size().unstack(fill_value=0)

# Plotting
count_df.plot(kind='bar', stacked=False, color=['skyblue', 'salmon'])
plt.title('Number of People by GenHlth with and without Diabetes')
plt.xlabel('GenHlth')
plt.ylabel('Number of People')
plt.xticks(rotation=45)
plt.legend(['No Diabetes', 'Has Diabetes'])

plt.show()

"""Observations:
* The poorer GenHlth is, the bigger percentage of people has diabetes in this category
* correlation is high

## Violin plot for people who have and don't have diabetes
"""

# Now thinking about your physical health,
# which includes physical illness
# and injury, for how many days during
# the past 30 days was your physical health not good?
# scale 1-30 days

df0 = df_50_50

# Violin plot for people who have and don't have diabetes to check if they were feeling bad during the the last 30 days
plt.figure(figsize=(8, 6))
sns.violinplot(x='Diabetes_binary', y='PhysHlth', data=df0)
plt.title('Violin Plot of PhysHlth for Diabetes_binary=1 and 0')
plt.xlabel('Diabetes_binary')
plt.ylabel('PhysHlth')
plt.grid(True)

"""Observations:
* people who have diabetes usually feel worse more days that those without
* correlations exist, but they are not so strong
* people who don't have diabetes usually feel bad very rarely - the biggest part of the distribution is in the interval of less then 3 days
* the previous observation is much "weaker" for people with diabetes, but it also exists
* there are little condensations on the top of each plots, probably because peaople may feel bad due to some other factors (diseases)

## People by Difficulty in Walking (with and without diabetes)
"""

# DiffWalk (0,1) - (Yes,No)

count_df = df_50_50.groupby(['DiffWalk', 'Diabetes_binary']).size().unstack(fill_value=0)

# Plotting
count_df.plot(kind='bar', stacked=False, color=['skyblue', 'salmon'])
plt.title('Number of People by DiffWalk with and without Diabetes')
plt.xlabel('DiffWalk')
plt.ylabel('Number of People')
plt.xticks(rotation=45)
plt.legend(['No Diabetes', 'Has Diabetes'])

plt.show()

"""Observations:
* people who have diabetes experience more difficulties in walking
* correlation exist
* probably, DiffWalk also depends on other factors

##Age vs Diabetes
"""

age_diabetes_percentage = df_50_50.groupby('Age')['Diabetes_binary'].mean().reset_index()
age_diabetes_percentage

def _plot_series(series, series_name, series_index=0):
  from matplotlib import pyplot as plt
  import seaborn as sns
  palette = list(sns.palettes.mpl_palette('Dark2'))
  xs = series['Age']
  ys = series['Diabetes_binary']

  plt.plot(xs, ys, label=series_name, color=palette[series_index % len(palette)])

fig, ax = plt.subplots(figsize=(10, 5.2), layout='constrained')
df_sorted = age_diabetes_percentage.sort_values('Age', ascending=True)
_plot_series(df_sorted, '')
sns.despine(fig=fig, ax=ax)
plt.xlabel('Age')
_ = plt.ylabel('Diabetes_binary')

"""Observations:
* Strong correlation
* The older person is, the bigger percentage of their age has diabetes
* Weird age scale (up to 13 years old)
"""